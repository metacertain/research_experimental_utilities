

// path for each path





{


}

// route param for each path

{


}


// HEADER params for each path

{
                                                                                                                                       } 

}

// queueue param for each path
{}


}


// responses for each path

{

}



// path routeparam|headerparam|queryparam|responsebody

{
{ { {"GET", "/sign/\\{id\\}/\\{document\\}",	 					"Signature"}				 											},	{ {"id", "hex string - eth address"}, {"document", "hex string - document to sign"}									},	{ 																			  	} 	,	{ 															}  , 	{ { "200", "Ok", "" }, { "401", "Unauthorised", "" }, { "404", "Not found", "" }  																	} }, 
{ { {"GET", "/dh/\\{id\\}/\\{pubkey\\}",	 					"Diffie-Hellman shared secret"}		 											},	{ {"id", "hex string - eth address"}, {"pubkey", "hex string - represents the remote party in the shared secret arrangement"}				},	{ 																			  	} 	,	{ 															}  , 	{ { "200", "Ok", "" }, { "401", "Unauthorised", "" }, { "404", "Not found", "" }  																	} }, 
{ { {"GET", "/eth/\\{contract\\}/\\{function\\}/\\{args\\}",				"Ethereum API call"}			 											},	{ {"contract", "hex string - eth address of contract"}, {"function", "string - endpoint within contract"}, {"args", "arguments for the eth API call"}	},	{ 																			  	} 	,	{ 															}  , 	{ { "200", "Ok", "" }, { "400", "Bad Request", "" }, { "404", "Not found", "" }, { "422", "Unprocessable entity", "" }  												} }, 
{ { {"POST", "/eth/\\{contract\\}/\\{function\\}/\\{args\\}",				"Ethereum API send transaction"}	 											},	{ {"contract", "hex string - eth address of contract"}, {"function", "string - endpoint within contract"}, {"args", "arguments for the eth API call"}	},	{ 																			  	} 	,	{ 															}  , 	{ { "200", "Ok", "" }, { "400", "Bad Request", "" }, { "401", "Unauthorised", "" }, { "404", "Not found", "" }, { "422", "Unprocessable entity", "" }									} }, 
{ { {"GET", "/input/\\{id\\}",	 							"API endpoint GET/input/{id}"}		 											},	{ {"id", "hex string -  eth address of the persona the input is expected from"}, {"note", "the question to be answered or instruction to select"}	},	{ 																			  	} 	,	{ 															}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"PUT", "/bzz:/",	 								"Append to upload, returns new manifest"} 											},	{ {"file/collection", "as request body"} 														},	{ {"SWARM-TAG", "hex string" }, {"SWARM-STAMP", "hex string"}, {"SWARM-ENCRYPTION", "hex string"}, {"SWARM-PIN", "bool"}, {"SWARM-PARITIES", "integer"}  	} 	,	{ 															}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"POST", "/bzz:/", 									"Upload file or collection, returns tag used for tracking global sync state"} 							},	{ {"file/collection", "as request body"} 														},	{ {"SWARM-TAG", "hex string" }, {"SWARM-STAMP", "hex string"}, {"SWARM-ENCRYPTION", "hex string"}, {"SWARM-PIN", "bool"}, {"SWARM-PARITIES", "integer"}  	} 	,	{ 															}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"POST", "/tags", 									"Create new tag"} 														},	{ 							 												},	{  																				} 	,	{ 															}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"GET", "/tags?offset=\\{offset}&length=\\{length\\}", 				"Get all tags"} 														},	{ 							 												},	{  																				} 	,	{ {"offset", "integer"}, {"length", "integer"}										}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"GET", "/tags/\\{id\\}", 								"View details for tag with ID"} 												},	{ {"id", "hex string"} 																	},	{  																				} 	,	{ 															}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"DELETE", "/tags/\\{id\\}",							"Path description"} 														},	{ {"id", "hex string"}																	},	{  																				} 	,	{ 															}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"GET", "/stamp", 									"View all postage stamps"} 													},	{ 							 												},	{  																				} 	,	{ 															}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"GET", "/stamp/{id}",								"View postage stamp with id"} 													},	{ {"id", "hex string"} 																	},	{  																				} 	,	{ 															}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"PUT", "/stamp/{id}", 								"Top up postage stamp with id"} 												},	{ {"id", "hex string"} 																	},	{  																				} 	,	{ 															}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"DELETE", "/stamp/{id}", 								"Drain and expire stamp with id"} 												},	{ {"id", "hex string"} 																	},	{  																				} 	,	{ 															}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"POST", "/stamp/{id}", 								"Create a new postage stamp"} 													},	{ {"id", "hex string"} 																	},	{  																				} 	,	{ 															}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"GET", "/pin/?offset=\\{offset}&length=\\{length\\}",				"List Pinned Content and metadata"} 												},	{ 							 												},	{  																				} 	,	{ {"offset", "integer"}, {"length", "integer"}										}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"GET", "/pin/\\{id\\}",								"View Pinned Content and metadata"} 												},	{ {"id", "hex string"}																	},	{  																				} 	,	{ 															}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"POST", "/pin/{id}", 								"Pin an already uploaded content"} 												},	{ {"id", ""} 																		},	{  																				} 	,	{ 															}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"PUT", "/pin/{id}", 								"Path description?"} 														},	{ {"id", ""} 																		},	{  																				} 	,	{ 															}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"DELETE", "/pin/{id}", 								"Remove pinning from content"} 													},	{ {"id", ""} 																		},	{  																				} 	,	{ 															}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"GET", "/chunk/\\{reference\\}", 							"Retrieve chunk as in \\ref{def:retrieve}"} 											},	{ {"reference", "hex string"} 																},	{ {"SWARM-ENCRYPTION", "hex string"}																} 	,	{ 															}  , 	{ { "200", "Ok", "" }, {"403", "Forbidden", ""}																						} }, 
{ { {"POST", "/chunk/(?span=\\{span\\})", 						"Create chunk as in \\ref{def:store}"} 												},	{ 							 												},	{ {"SWARM-TAG", "hex string" }, {"SWARM-STAMP", "hex string"}, {"SWARM-ENCRYPTION", "hex string"}, {"SWARM-PIN", "bool"}, {"SWARM-PARITIES", "integer"} 	} 	,	{ {"span", "string"} 													}  , 	{ { "200", "Ok", "" }, {"400", "Bad Request", ""} 																					} }, 
{ { {"GET", "/soc/\\{owner\\}/\\{id\\}(?key=\\{key\\})", 				"Retrieve single owner chunk as in \\ref{def:soc-retrieve} "} 									},	{ {"owner", "eth address of single owner"}, {"id", "identifier within owner namespace"} 								},	{  																				} 	,	{ {"key", "string"} 													}  , 	{ { "200", "Ok", "" }, {"400", "Bad Request", ""}																					} }, 
{ { {"POST", "/soc/\\{owner\\}/\\{id\\}?span=\\{span\\}", 				"Create new single owner chunk as in \\ref{def:soc-store} "} 									},	{ {"owner", "eth address of single owner"}, {"id", "identifier within owner namespace"} 								},	{ {"SWARM-TAG", "hex string" }, {"SWARM-STAMP", "hex string"}, {"SWARM-ENCRYPTION", "hex string"}, {"SWARM-PIN", "bool"}, {"SWARM-PARITIES", "integer"} 	} 	,	{ {"span", "string"}				 									}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"POST", "/file/",				 					"Path description as in \\ref{def:swarm-hash}"} 										},	{ 							 												},	{ {"SWARM-TAG", "hex string" }, {"SWARM-STAMP", "hex string"}, {"SWARM-ENCRYPTION", "hex string"}, {"SWARM-PIN", "bool"}, {"SWARM-PARITIES", "integer"} 	} 	,	{ 															}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"GET", "/file/\\{reference\\}", 							"Retrieve file by reference as in \\ref{def:file-retrieval}"} 									},	{ {"reference", "string"} 																},	{  																				} 	,	{ 															}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"PUT", "/file/ ", 									"Update file, returns new reference"} 												},	{ {"file/collection", "as request body"} 														},	{ {"SWARM-TAG", "hex string" }, {"SWARM-STAMP", "hex string"}, {"SWARM-ENCRYPTION", "hex string"}, {"SWARM-PIN", "bool"}, {"SWARM-PARITIES", "integer"} 	} 	,	{ 															}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"GET", "/manifest/\\{node:reference\\}/\\{path\\}", 				"Lookup manifest by path as in \\ref{def:manifests-lookup}"} 									},	{ {"node reference", "hex string"}, {"path", "string"} 													},	{  																				} 	,	{ 															}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"DELETE", "/manifest/\\{node\\}/\\{path\\} ", 					"Delete manifest by path as in \\ref{def:manifests-remove}"} 									},	{ {"node", "string"}, {"path", "string"} 														},	{  																				} 	,	{ 															}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"PUT", "/manifest/\\{old\\} ", 							"Update manifest as in \\ref{def:manifest-update}"} 										},	{ {"old", "string"} 																	},	{  																				} 	,	{ 															}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"POST", "/manifest/\\{old\\}/\\{new\\}", 						"Merge manifests as in \\ref{def:manifest-merge}"} 										},	{ {"old", "string"}, {"new", "string"} 															},	{  																				} 	,	{ 															}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"POST", "/access/\\{address\\} ", 							"Lock ACT for address as in \\ref{def:ac-api}"} 										},	{ {"address", "string"} 																},	{  																				} 	,	{ 															}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"GET", "/access/\\{address\\} ", 							"Unlock ACT for address as in \\ref{def:ac-api}"} 										},	{ {"address", "string"}																	},	{  																				} 	,	{ 															}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"PUT", "/access/\\{root\\}/\\{pubkey\\}", 						"Add entry for pubkey to the ACT referred in the root access manifest as in \\ref{def:act-api}"} 				},	{ {"root", "string"}, {"pubkey", "hex string"}														},	{  																				} 	,	{ 															}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"DELETE", "/access/\\{root\\}/\\{pubkey\\}", 					"Remove entry for pubkey from ACT referred in the root access manifest, see \\ref{def:act-api}"} 				},	{ {"root", "string"}, {"pubkey", "hex string"}														},	{  																				} 	,	{ 															}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"POST", "/pss/\\{recipient\\}/\\{topic\\}(?targets=\\{targets\\})", 		"Send private message to recipient(s) as in \\ref{def:send}"}									},	{ {"recipient", "string"}, {"topic", "string"}														},	{																				}	,	{ {"targets", "hex string"}												}  , 	{ { "200", "Ok", "" } 																									} }, 
{ { {"GET", "/pss/\\{topic\\}/\\{channel\\}",						"Subscribe to messages with topic to delivered on given channel, see \\ref{def:recieve}"}					},	{ {"topic", "string"}, {"channel", "string"} 														},	{																				}	,	{ 															}  , 	{ { "200", "Ok", "" } 																									} }, 
}
	


{ { "200", "ok",                             				"" } }
{ { "204", "No Content",                     				"" } }
{ { "400", "Bad request",                    				"" } }
{ { "401", "Unauthorized",                   				"" } }
{ { "403", "Forbidden",                      				"" } }
{ { "404", "Not Found",                      				"" } }
{ { "405", "Method Not Allowed",             				"" } }
{ { "408", "Request Timeout",                				"" } }
{ { "406", "406 Not Acceptable",             				"" } }
{ { "409", "Conflict",                       				"" } }
{ { "410", "Gone",                           				"" } }
{ { "411", "Length Required",                				"" } }
{ { "412", "Precondition Failed",            				"" } }
{ { "413", "Payload Too Large",              				"" } }
{ { "414", "URI Too Long",                   				"" } }
{ { "415", "Unsupported Media Type",         				"" } }
{ { "429", "Too Many Requests",              				"" } }
{ { "500", "Internal Server Error",          				"" } }
{ { "501", "Not Implemented",                				"" } }
{ { "503", "Service Unavailable",            				"" } }
{ { "504", "Gateway Timeout",                				"" } }
{ { "505", "Nothing exists",                 				"" } }


"400", "Bad request"
"401", "Unauthorized"
"403", "Forbidden"
"404", "Not Found"
"405", "Method Not Allowed"
"408", "Request Timeout"
"406", "406 Not Acceptable"
"409", "Conflict"
"410", "Gone"
"411", "Length Required"
"412", "Precondition Failed"
"413", "Payload Too Large"
"414", "URI Too Long"
"415", "Unsupported Media Type"
"429", "Too Many Requests"
"500", "Internal Server Error"
"501", "Not Implemented"
"503", "Service Unavailable"
"504", "Gateway Timeout"




























































